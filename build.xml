<?xml version="1.0" encoding="UTF-8"?>
<!-- You may freely edit this file. See commented blocks below for -->
<!-- some examples of how to customize the build. -->
<!-- (If you delete it and reopen the project it will be recreated.) -->
<!-- By default, only the Clean and Build commands use this build script. -->
<!-- Commands such as Run, Debug, and Test only use this build script if -->
<!-- the Compile on Save feature is turned off for the project. -->
<!-- You can turn off the Compile on Save (or Deploy on Save) setting -->
<!-- in the project's Project Properties dialog box.-->
<project name="Tagerator" default="default" basedir=".">
    <description>Builds, tests, and runs the project Tagerator.</description>
    <import file="nbproject/build-impl.xml"/>

    <!-- The application version is read from this file. -->
    <loadproperties srcfile="src/net/jeremybrooks/tagerator/VERSION"/>

    <!-- Define the task used to create graphical installers. -->
    <taskdef name="izpack" classpath="${basedir}/resources/izpack/standalone-compiler.jar"
	     classname="com.izforge.izpack.ant.IzPackTask"/>

    <!--

    There exist several targets which are by default empty and which can be 
    used for execution of your tasks. These targets are usually executed 
    before and after some main targets. They are: 

      -pre-init:                 called before initialization of project properties
      -post-init:                called after initialization of project properties
      -pre-compile:              called before javac compilation
      -post-compile:             called after javac compilation
      -pre-compile-single:       called before javac compilation of single file
      -post-compile-single:      called after javac compilation of single file
      -pre-compile-test:         called before javac compilation of JUnit tests
      -post-compile-test:        called after javac compilation of JUnit tests
      -pre-compile-test-single:  called before javac compilation of single JUnit test
      -post-compile-test-single: called after javac compilation of single JUunit test
      -pre-jar:                  called before JAR building
      -post-jar:                 called after JAR building
      -post-clean:               called after cleaning build products

    (Targets beginning with '-' are not intended to be called on their own.)

    Example of inserting an obfuscator after compilation could look like this:

        <target name="-post-compile">
            <obfuscate>
                <fileset dir="${build.classes.dir}"/>
            </obfuscate>
        </target>

    For list of available properties check the imported 
    nbproject/build-impl.xml file. 


    Another way to customize the build is by overriding existing main targets.
    The targets of interest are: 

      -init-macrodef-javac:     defines macro for javac compilation
      -init-macrodef-junit:     defines macro for junit execution
      -init-macrodef-debug:     defines macro for class debugging
      -init-macrodef-java:      defines macro for class execution
      -do-jar-with-manifest:    JAR building (if you are using a manifest)
      -do-jar-without-manifest: JAR building (if you are not using a manifest)
      run:                      execution of project 
      -javadoc-build:           Javadoc generation
      test-report:              JUnit report generation

    An example of overriding the target for project execution could look like this:

        <target name="run" depends="Tagerator-impl.jar">
            <exec dir="bin" executable="launcher.exe">
                <arg file="${dist.jar}"/>
            </exec>
        </target>

    Notice that the overridden target depends on the jar target and not only on 
    the compile target as the regular run target does. Again, for a list of available 
    properties which you can use, check the target you are overriding in the
    nbproject/build-impl.xml file. 

    -->

    <target name="-pre-init">
	<delete dir="deploy"/>

    </target>

    <target name="-post-jar">

	<property name="deploy.dir" value="deploy"/>

	<!--
           - Create source archive
           -
           -->
	<mkdir dir="${deploy.dir}/Tagerator"/>


	<copy todir="${deploy.dir}/Tagerator/images">
	    <fileset dir="images">
		<include name="**/*"/>
	    </fileset>
	</copy>

	<copy todir="${deploy.dir}/Tagerator/lib">
	    <fileset dir="${dist.dir}/lib">
		<include name="**/*"/>
	    </fileset>
	</copy>
	<copy todir="${deploy.dir}/Tagerator/nbproject">
	    <fileset dir="nbproject">
		<include name="**/*"/>
                <exclude name="**/*.hprof"/>
	    </fileset>
	</copy>
	<copy todir="${deploy.dir}/Tagerator/resources">
	    <fileset dir="resources">
		<include name="**/*"/>
	    </fileset>
	</copy>
	<copy todir="${deploy.dir}/Tagerator/src">
	    <fileset dir="src">
		<include name="**/*"/>
	    </fileset>
	</copy>
	<mkdir dir="${deploy.dir}/Tagerator/test"/>
	<copy todir="${deploy.dir}/Tagerator/test">
	    <fileset dir="test">
		<include name="**/*"/>
	    </fileset>
	</copy>
	<copy todir="${deploy.dir}/Tagerator">
	    <fileset dir=".">
		<include name="*.xml"/>
		<include name="*.txt"/>
	    </fileset>
	</copy>

	<tar destFile="${deploy.dir}/Tagerator-${app.version}_SOURCE.tar.gz" compression="gzip">
	    <tarfileset dir="${deploy.dir}/Tagerator" prefix="Tagerator">
		<include name="**/*"/>
		<exclude name="**/*.sh"/>
		<exclude name="**/JavaApplicationStub"/>
	    </tarfileset>
	    <tarfileset dir="${deploy.dir}/Tagerator" prefix="Tagerator" mode="755">
		<include name="**/*.sh"/>
		<include name="**/JavaApplicationStub"/>
	    </tarfileset>
	</tar>

	<zip destFile="${deploy.dir}/Tagerator-${app.version}_SOURCE.zip">
	    <zipfileset dir="${deploy.dir}/Tagerator" prefix="Tagerator">
		<include name="**/*"/>
		<exclude name="**/*.sh"/>
		<exclude name="**/JavaApplicationStub"/>
	    </zipfileset>
	    <zipfileset dir="${deploy.dir}/Tagerator" prefix="Tagerator" filemode="755">
		<include name="**/*.sh"/>
		<include name="**/JavaApplicationStub"/>
	    </zipfileset>
	</zip>

	<property name="all.dir" value="${deploy.dir}/all/Tagerator-${app.version}"/>

	<!--
           -
           - Create a generic installation
           -
           -->
	<mkdir dir="${all.dir}/lib"/>
	<mkdir dir="${all.dir}/bin"/>
	<copy todir="${all.dir}/lib">
	    <fileset dir="${dist.dir}/lib">
		<include name="**/*.jar"/>
		<exclude name="standalone-compiler.jar"/>
	    </fileset>
	</copy>
	<copy file="${dist.dir}/Tagerator.jar" todir="${all.dir}/lib"/>
	<copy todir="${all.dir}/bin">
	    <fileset dir="resources/scripts">
		<include name="*.sh"/>
	    </fileset>
	</copy>
        <!--
	<copy todir="${all.dir}/images">
	    <fileset dir="images">
		<include name="icon*.png"/>
		<include name="icon*.ico"/>
	    </fileset>
	</copy>
	<copy todir="${all.dir}" file="README.txt"/>
	<copy todir="${all.dir}" file="CHANGELOG.txt"/>
	<copy todir="${all.dir}" file="LICENSE.txt"/>
	<copy todir="${all.dir}" file="TODO.txt"/>
-->
	<!-- Make archives of the generic install -->
	<tar destFile="${deploy.dir}/Tagerator-${app.version}_ANY.tar.gz" compression="gzip">
	    <tarfileset dir="${deploy.dir}/all" mode="755">
		<include name="**/*.sh"/>
	    </tarfileset>
	    <tarfileset dir="${deploy.dir}/all">
		<include name="**/*"/>
		<exclude name="**/*.sh"/>
	    </tarfileset>
	</tar>
	<zip destFile="${deploy.dir}/Tagerator-${app.version}_ANY.zip">
	    <zipfileset dir="${deploy.dir}/all" filemode="755">
		<include name="**/*.sh"/>
	    </zipfileset>
	    <zipfileset dir="${deploy.dir}/all">
		<include name="**/*"/>
		<exclude name="**/*.sh"/>
	    </zipfileset>
	</zip>

	<!--
           -
           - Create a mac installation
           -
           -->
	<property name="macdist.dir" value="${deploy.dir}/Tagerator-${app.version}_OSX"/>
	<property name="macapp.dir" value="${macdist.dir}/Tagerator.app"/>

	<mkdir dir="${macapp.dir}/Contents/MacOS"/>
	<mkdir dir="${macapp.dir}/Contents/Resources/Java/dll"/>


	<copy todir="${macapp.dir}/Contents/Resources/Java">
	    <fileset dir="${dist.dir}/lib">
		<include name="**/*.jar"/>
		<exclude name="standalone-compiler.jar"/>
	    </fileset>
	</copy>
        <copy file="images/Splash.png" todir="${macapp.dir}/Contents/Resources/Java"/>
	<copy file="${dist.dir}/Tagerator.jar" todir="${macapp.dir}/Contents/Resources/Java"/>

	<copy file="resources/mac/Info.plist" todir="${macapp.dir}/Contents"/>
	<copy file="resources/mac/JavaApplicationStub" todir="${macapp.dir}/Contents/MacOS"/>
	<chmod file="${macapp.dir}/Contents/MacOS/JavaApplicationStub" perm="755"/>
	<copy file="resources/mac/Tagerator.icns" todir="${macapp.dir}/Contents/Resources"/>

	<copy todir="${macdist.dir}" file="${src.dir}/README"/>
	<copy todir="${macdist.dir}" file="${src.dir}/CHANGELOG"/>
	<copy todir="${macdist.dir}" file="${src.dir}/COPYING"/>
	<copy todir="${macdist.dir}" file="${src.dir}/TODO"/>


	<!--
           -
           - Create a graphical installer using IzPack
           -
           -->

	<!-- SOME NOTES ON IZPACK USAGE
	      -
	      - The izPackDir is set to ${basedir}/resources/izpack, which must
	      -   contain bin/native/izpack/ShellLink.dll.
	      -
	      -
	      -->

	<izpack output="${basedir}/deploy/Tagerator-${app.version}_Installer.jar"
	    installerType="standard"
	    basedir="${basedir}"
	    izPackDir="${basedir}/resources/izpack">
	    <config><![CDATA[
<installation version="1.0">
<info>
    <appname>Tagerator</appname>
    <appversion>@{app.version}</appversion>
    <appsubpath>Tagerator</appsubpath>
    <url>http://www.jeremybrooks.net/tagerator/</url>
    <authors>
	<author name="Jeremy Brooks" email="jeremyb@whirljack.net"/>
    </authors>
    <javaversion>1.6</javaversion>
</info>

<guiprefs resizable="no" width="640" height="480"/>

<locale>
    <langpack iso3="eng"/>
</locale>

<resources>
    <res id="LicencePanel.licence" src="@{src.dir}/COPYING"/>
    <res id="Installer.image" src="images/installer.png"/>
    <res id="shortcutSpec.xml" src="resources/default_shortcut_spec.xml"/>
    <res id="Unix_shortcutSpec.xml" src="resources/unix_shortcut_spec.xml"/>
</resources>

<native type="izpack" name="ShellLink.dll"/>

<panels>
    <panel classname="HelloPanel"/>
    <panel classname="LicencePanel"/>
    <panel classname="TargetPanel"/>
    <panel classname="InstallPanel"/>
    <panel classname="ShortcutPanel"/>
    <panel classname="SimpleFinishPanel"/>
</panels>

<packs>
<pack name="Core" required="yes">
    <description>The Tagerator files.</description>

    <file targetdir="$INSTALL_PATH/bin" src="resources/scripts/launch_tagerator.sh">
	<os family="unix"/>
    </file>
    <parsable targetfile="$INSTALL_PATH/bin/launch_tagerator.sh">
	<os family="unix"/>
    </parsable>
    <executable targetfile="$INSTALL_PATH/bin/launch_tagerator.sh" stage="never">
	<os family="unix"/>
    </executable>

    <fileset targetdir="$INSTALL_PATH/lib" dir="deploy/all/Tagerator-@{app.version}/lib">
	<include name="*.jar"/>
	<exclude name="Tagerator.jar"/>
    </fileset>
    <fileset targetdir="$INSTALL_PATH" dir="deploy/all/Tagerator-@{app.version}/lib">
	<include name="Tagerator.jar"/>
    </fileset>

    <fileset targetdir="$INSTALL_PATH/images" dir="images">
	<include name="icon*.png"/>
	<include name="icon*.ico"/>
	<include name="uninstall.ico"/>
    </fileset>


    <file targetdir="$INSTALL_PATH" src="@{src.dir}/README"/>
    <file targetdir="$INSTALL_PATH" src="@{src.dir}/COPYING"/>
    <file targetdir="$INSTALL_PATH" src="@{src.dir}/CHANGELOG"/>
    <file targetdir="$INSTALL_PATH" src="@{src.dir}/TODO"/>

</pack>
</packs>
</installation>]]>
	    </config>

	</izpack>

    </target>

    <target name="macapp" description="Build a Mac app bundle.">
        <property name="macdist.dir" value="${deploy.dir}/${project.name}-${app.version}_OSX"/>
	<property name="macapp.dir" value="${macdist.dir}/${project.name}.app"/>

        <!-- create the app bundle directory structure -->
	<mkdir dir="${macapp.dir}/Contents/MacOS"/>
	<mkdir dir="${macapp.dir}/Contents/Resources/Java/dll"/>

        <!-- copy the jar files -->
	<copy todir="${macapp.dir}/Contents/Resources/Java">
	    <fileset dir="${dist.dir}/lib">
		<include name="**/*.jar"/>
	    </fileset>
	</copy>
        <copy file="${dist.dir}/Tagerator.jar" todir="${macapp.dir}/Contents/Resources/Java"/>

        <!-- copy the splash screen -->
        <copy file="images/Splash.png" todir="${macapp.dir}/Contents/Resources/Java"/>

        <!-- copy the resources specific to the mac app bundle -->
	<copy file="resources/mac/Info.plist" todir="${macapp.dir}/Contents"/>
	<copy file="resources/mac/JavaApplicationStub" todir="${macapp.dir}/Contents/MacOS"/>
	<chmod file="${macapp.dir}/Contents/MacOS/JavaApplicationStub" perm="755"/>
	<copy file="resources/mac/Tagerator.icns" todir="${macapp.dir}/Contents/Resources"/>

        <!-- copy additional files that should be distributed, but are not part of the app bundle -->
	<copy todir="${macdist.dir}" file="${src.dir}/README"/>
	<copy todir="${macdist.dir}" file="${src.dir}/CHANGELOG"/>
	<copy todir="${macdist.dir}" file="${src.dir}/LICENSE"/>
	<copy todir="${macdist.dir}" file="${src.dir}/TODO"/>
    </target>
</project>
