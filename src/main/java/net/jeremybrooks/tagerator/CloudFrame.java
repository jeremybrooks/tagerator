/*
 * Tagerator is Copyright 2011 by Jeremy Brooks
 *
 * This file is part of Tagerator.
 *
 *  Tagerator is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  Tagerator is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with Tagerator.  If not, see <http://www.gnu.org/licenses/>.
 */
package net.jeremybrooks.tagerator;

import java.awt.image.BufferedImage;
import java.io.File;
import java.util.Arrays;
import java.util.List;
import javax.imageio.ImageIO;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import processing.core.PApplet;
import processing.core.PConstants;
import wordcram.Placers;
import wordcram.Word;
import wordcram.WordCram;
import wordcram.WordPlacer;
import wordcram.text.TextSplitter;


/**
 * A frame to run the tag cloud generation sketch in.
 *
 * This class also implements a right click menu to save the tag cloud image.
 * 
 * @author jeremyb
 */
public class CloudFrame extends javax.swing.JFrame {

    private Logger logger = LogManager.getLogger();

    private PApplet sketch;


    /** Creates new form CloudFrame */
    public CloudFrame() {
	initComponents();
	int x = MainWindow.getMainWindow().getCanvasX();
	int y = MainWindow.getMainWindow().getCanvasY();

	java.awt.Dimension screenSize = java.awt.Toolkit.getDefaultToolkit().getScreenSize();
	setBounds((screenSize.width - x) / 2, (screenSize.height - y) / 2, x, y);
	this.sketch = new CloudSketch();
	this.jPanel1.add(sketch);
    }


    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        mnuPopup = new javax.swing.JPopupMenu();
        mnuSaveImage = new javax.swing.JMenuItem();
        jPanel1 = new javax.swing.JPanel();

        mnuSaveImage.setText("Save Tag Cloud");
        mnuSaveImage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuSaveImageActionPerformed(evt);
            }
        });
        mnuPopup.add(mnuSaveImage);

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Working, please wait....");

        org.jdesktop.layout.GroupLayout jPanel1Layout = new org.jdesktop.layout.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 1000, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 778, Short.MAX_VALUE)
        );

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents


    /**
     * Detect double clicks and display the menu.
     * @param evt
     */

    /**
     * Save the generated tag cloud image to a file.
     *
     * @param evt
     */
    private void mnuSaveImageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuSaveImageActionPerformed
	File desktop = new File(System.getProperty("user.home"), "Desktop");
	JFileChooser jfc = new JFileChooser(desktop);
	jfc.setDialogType(JFileChooser.SAVE_DIALOG);
	jfc.setFileFilter(new FileNameExtensionFilter("PNG graphic file", "png"));
	jfc.setDialogTitle("Save tag cloud");
	int result = jfc.showSaveDialog(this);
	if (result == JFileChooser.APPROVE_OPTION) {
	    BufferedImage clipBoardImage =
		    new BufferedImage(this.getWidth(), this.getHeight(),
		    (this.sketch.g.format == PConstants.ARGB) ? BufferedImage.TYPE_INT_ARGB
		    : BufferedImage.TYPE_INT_RGB);

	    this.sketch.g.loadPixels();
	    // important: the last parameter really has to be the original width!
	    clipBoardImage.setRGB(0, 0, this.getWidth(), this.getHeight(), this.sketch.g.pixels, 0, this.getWidth());

	    try {
		File filename = jfc.getSelectedFile();
		if (!filename.getName().endsWith(".png")) {
		    filename = new File(filename.getParent(), filename.getName() + ".png");
		}
		ImageIO.write(clipBoardImage, "png", filename);
	    } catch (Exception e) {
		logger.error("Error saving file " + jfc.getSelectedFile().getAbsolutePath(), e);
		JOptionPane.showMessageDialog(this,
			"There was an error while trying to save the image.\n"
			+ "Error message: '" + e.getMessage() + "'\n"
			+ "See log for more detail.",
			"Could not save image",
			JOptionPane.ERROR_MESSAGE);
	    }
	}
    }//GEN-LAST:event_mnuSaveImageActionPerformed


    /**
     * Start the sketch.
     */
    public void startSketch() {
	this.sketch.init();
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPopupMenu mnuPopup;
    private javax.swing.JMenuItem mnuSaveImage;
    // End of variables declaration//GEN-END:variables


    /**
     * This is the processing sketch that draws the word cloud.
     */
    class CloudSketch extends PApplet {

	WordCram wordCram;

	
	/**
	 * Set up the sketch.
	 */
	@Override
	public void setup() {
	    size(MainWindow.getMainWindow().getCanvasX(), MainWindow.getMainWindow().getCanvasY());
	    background(MainWindow.getMainWindow().getBackgroundSlider());
	    colorMode(RGB);
	    initWordCram();
	}


	/**
	 * Init the WordCram library.
	 *
	 * This generates the weighted word list, then sets the parameters that
	 * change the look and feel of the cloud based on user selections.
	 */
	void initWordCram() {
	    String file = Main.tagCloudFile.getAbsolutePath();
	    Word[] tags = new TextSplitter().split(loadStrings(file));
	    WordPlacer placer;
	    List<int[]> colorList;

	    /*
	    Center Clump
	    Horizontal Band Anchored Left
	    Horizontal Line
	    Swirl
	    Upper Left
	    Wave
	     */
	    switch (MainWindow.getMainWindow().getPlacer()) {
		case 0:
		    placer = Placers.centerClump();
		    break;
		case 1:
		    placer = Placers.horizBandAnchoredLeft();
		    break;
		case 2:
		    placer = Placers.horizLine();
		    break;
		case 3:
		    placer = Placers.swirl();
		    break;
		case 4:
		    placer = Placers.upperLeft();
		    break;
		case 5:
		    placer = Placers.wave();
		    break;
		default:
		    placer = Placers.centerClump();

	    }
	    wordCram = new WordCram(this).fromTextFile(Main.tagCloudFile.getAbsolutePath()).sizedByWeight(MainWindow.getMainWindow().getMinWeight(), MainWindow.getMainWindow().getMaxWeight()).withFont(MainWindow.getMainWindow().getCloudFont()).withPlacer(placer).withStopWords(MainWindow.getMainWindow().getStopWords());
	    if (MainWindow.getMainWindow().isIncludeNumbers()) {
		wordCram.includeNumbers();
	    } else {
		wordCram.excludeNumbers();
	    }

	    if (MainWindow.getMainWindow().isUppercase()) {
		wordCram.upperCase();
	    }

	    // percentage of 100
	    float percent = 100.0f / MainWindow.getMainWindow().getWiggle();
	    float wiggle = (float) (2 * Math.PI) / percent;	// percent of full circle in radians
	    logger.info("Wiggle is " + wiggle);
	    if (wiggle > 0) {
		wordCram.angledBetween(-wiggle, wiggle);
		logger.info("Gettin wiggly!");
	    }

	    // colors
	    colorList = MainWindow.getMainWindow().getSelectedColorArray();
	    if (colorList != null) {
		// color list is a list of int[]
		// each int[] in the list must be converted to a
		// color() value, which is an int.
		// the resulting color values go into a new int[]
		// which is passed to wordCram.withColors

		int[] colorArray = new int[colorList.size()];
		int i = 0;
		for (int[] arr : colorList) {
		    logger.debug("Color definition: " + Arrays.toString(arr));
		    
		    switch (arr.length) {
			case 1:
			    colorArray[i] = color(arr[0]);
			    break;
			case 2:
			    colorArray[i] = color(arr[0], arr[1]);
			    break;
			case 3:
			    colorArray[i] = color(arr[0], arr[1], arr[2]);
			    break;
			case 4:
			    colorArray[i] = color(arr[0], arr[1], arr[2], arr[3]);
			    break;
			default:
			    colorArray[i] = color(0, 0, 0);
		    }
		    i++;
		}

		wordCram.withColors(colorArray);
	    }
	}


	/**
	 * Draw then next word. When finished, stop looping.
	 */
	@Override
	public void draw() {
	    if (wordCram.hasMore()) {
		wordCram.drawNext();
	    } else {
		setTitle("Finished");
		noLoop();
	    }

	}


	/**
	 * Handle right click, enabling save option if the sketch is finished.
	 */
	@Override
	public void mousePressed() {
	    if (mouseEvent.isPopupTrigger()) {
		mnuSaveImage.setEnabled(getTitle().equalsIgnoreCase("finished"));
		mnuPopup.show(mouseEvent.getComponent(), mouseEvent.getX(), mouseEvent.getY());
	    }
	}

    }
}
