/*
 * Tagerator is Copyright 2011 by Jeremy Brooks
 *
 * This file is part of Tagerator.
 *
 *  Tagerator is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  Tagerator is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with Tagerator.  If not, see <http://www.gnu.org/licenses/>.
 */
package net.jeremybrooks.tagerator;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.util.Date;
import java.util.List;
import java.util.Map;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.StringTokenizer;
import javax.swing.JOptionPane;
import net.jeremybrooks.tagerator.helpers.BrowserLauncher;
import net.jeremybrooks.tagerator.helpers.FlickrHelper;
import net.jeremybrooks.tagerator.workers.TagCollectorWorker;
import net.whirljack.common.util.IOUtil;
import net.whirljack.common.util.NetUtil;
import org.apache.log4j.Logger;
import processing.core.PFont;


/**
 * The main window.
 *
 * Allow the user to start the process and select parameters for the tag
 * could generation sketch.
 * 
 * @author jeremyb
 */
public class MainWindow extends javax.swing.JFrame {

    private Logger logger = Logger.getLogger(MainWindow.class);
    private static MainWindow mainWindow;

    private Map<String, List<int[]>> colorScheme;

    /** Creates new form MainWindow */
    public MainWindow() {
	mainWindow = this;

	initColorScheme();

        initComponents();
	this.cmbColor.setSelectedItem("Random");
	this.btnAuthorize.setVisible(false);
	
	this.btnUpdate.setVisible(false);
	enableTagCloud();

	this.cbxUpdates.setSelected(Main.getPropertyStore().getPropertyAsBoolean(TConstants.CHECK_FOR_UPDATES));
	this.cbxProxy.setSelected(Main.getPropertyStore().getPropertyAsBoolean(TConstants.USE_PROXY));
	this.txtProxyHost.setText(Main.getPropertyStore().getProperty(TConstants.PROXY_HOST));
	this.txtProxyPort.setText(Main.getPropertyStore().getProperty(TConstants.PROXY_PORT));
	this.txtProxyUser.setText(Main.getPropertyStore().getProperty(TConstants.PROXY_USER));
	this.txtProxyPass.setText(Main.getPropertyStore().getProperty(TConstants.PROXY_PASS));
	this.setProxyEnabledStates();

	int total = Main.getPropertyStore().getPropertyAsInt(TConstants.TOTAL_TAGS);
	if (total > 0) {
	    	lblTotal.setText("Total Tags: " + total);
	}

	String date = Main.getPropertyStore().getProperty(TConstants.LAST_DATE);
	if (date != null) {
	    this.lblLastCount.setText("Last Count: " + date);
	}
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        lblTotal = new javax.swing.JLabel();
        btnStart = new javax.swing.JButton();
        btnUpdate = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        lblLastCount = new javax.swing.JLabel();
        btnShowTags = new javax.swing.JButton();
        btnAuthorize = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jLabel10 = new javax.swing.JLabel();
        cmbX = new javax.swing.JComboBox();
        jLabel11 = new javax.swing.JLabel();
        cmbY = new javax.swing.JComboBox();
        btnTagCloud = new javax.swing.JToggleButton();
        jLabel5 = new javax.swing.JLabel();
        cmbMinWeight = new javax.swing.JComboBox();
        jLabel6 = new javax.swing.JLabel();
        cmbMaxWeight = new javax.swing.JComboBox();
        jLabel7 = new javax.swing.JLabel();
        cmbFont = new javax.swing.JComboBox();
        jLabel8 = new javax.swing.JLabel();
        cmbPlacer = new javax.swing.JComboBox();
        cbxIncludeNumbers = new javax.swing.JCheckBox();
        cbxUppercase = new javax.swing.JCheckBox();
        jLabel9 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        slideWiggle = new javax.swing.JSlider();
        slideBackground = new javax.swing.JSlider();
        cmbColor = new javax.swing.JComboBox();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtStopWords = new javax.swing.JTextArea();
        jLabel13 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        cbxUpdates = new javax.swing.JCheckBox();
        jPanel4 = new javax.swing.JPanel();
        cbxProxy = new javax.swing.JCheckBox();
        jLabel14 = new javax.swing.JLabel();
        txtProxyHost = new javax.swing.JTextField();
        jLabel15 = new javax.swing.JLabel();
        txtProxyPort = new javax.swing.JTextField();
        jLabel16 = new javax.swing.JLabel();
        txtProxyUser = new javax.swing.JTextField();
        jLabel17 = new javax.swing.JLabel();
        btnProxy = new javax.swing.JButton();
        txtProxyPass = new javax.swing.JPasswordField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(""));

        lblTotal.setText("Total Tags:");

        btnStart.setText("Start!");
        btnStart.setToolTipText("Connect to Flickr and count all the tags in your photostream.");
        btnStart.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnStartActionPerformed(evt);
            }
        });

        btnUpdate.setIcon(new javax.swing.ImageIcon(getClass().getResource("/new16.png"))); // NOI18N
        btnUpdate.setText("Get Latest Version");
        btnUpdate.setToolTipText("Open the Tagerator web site");
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActionPerformed(evt);
            }
        });

        jTextArea1.setColumns(20);
        jTextArea1.setEditable(false);
        jTextArea1.setLineWrap(true);
        jTextArea1.setRows(5);
        jTextArea1.setText("When you click the Start button, Tagerator will scan your Flickr photos for tags, counting how many times each tag is used. It will then display a table with the counts. \n\nYou can double click a table row to go to the Flickr search page for that tag, or copy the tag to the clipboard using the keyboard shortcut command-c (Mac) or ctrl-c (Windows and Linux).\n\nThe tags are all saved on disk. You can generate a tag cloud from the saved tags, or display the entire saved tag file if you want to do something else with it.");
        jTextArea1.setWrapStyleWord(true);
        jTextArea1.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        jScrollPane2.setViewportView(jTextArea1);

        lblLastCount.setText("Last Count:");

        btnShowTags.setText("Show All Tags");
        btnShowTags.setToolTipText("Open a window displaying the cached tags from the last run of Tagerator.");
        btnShowTags.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnShowTagsActionPerformed(evt);
            }
        });

        btnAuthorize.setText("Authorize");
        btnAuthorize.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAuthorizeActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout jPanel1Layout = new org.jdesktop.layout.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1Layout.createSequentialGroup()
                .add(btnUpdate)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(btnShowTags)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(btnAuthorize)
                .add(236, 236, 236))
            .add(jScrollPane2, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 606, Short.MAX_VALUE)
            .add(jPanel1Layout.createSequentialGroup()
                .add(lblTotal)
                .addContainerGap())
            .add(jPanel1Layout.createSequentialGroup()
                .add(lblLastCount)
                .addContainerGap())
            .add(jPanel1Layout.createSequentialGroup()
                .add(btnStart)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1Layout.createSequentialGroup()
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(btnUpdate)
                    .add(btnShowTags)
                    .add(btnAuthorize))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jScrollPane2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 221, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(lblTotal)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(lblLastCount)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 81, Short.MAX_VALUE)
                .add(btnStart))
        );

        jTabbedPane1.addTab("Info", jPanel1);

        jLabel10.setText("Canvas size");

        cmbX.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "100", "200", "500", "800", "1000", "1500", "2000" }));
        cmbX.setSelectedIndex(4);
        cmbX.setToolTipText("Tag cloud width");

        jLabel11.setText("x");

        cmbY.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "100", "200", "500", "800", "1000", "1500", "2000" }));
        cmbY.setSelectedIndex(3);
        cmbY.setToolTipText("Tag cloud height.");

        btnTagCloud.setText("Make Tag Cloud");
        btnTagCloud.setToolTipText("Make the tag cloud.");
        btnTagCloud.setEnabled(false);
        btnTagCloud.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTagCloudActionPerformed(evt);
            }
        });

        jLabel5.setText("Weighting min");

        cmbMinWeight.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "10", "20", "30", "40", "50", "60", "70", "80", "90", "100" }));
        cmbMinWeight.setSelectedIndex(1);
        cmbMinWeight.setToolTipText("Minimum size for words.");
        cmbMinWeight.setEnabled(false);

        jLabel6.setText("max");

        cmbMaxWeight.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "10", "20", "30", "40", "50", "60", "70", "80", "90", "100" }));
        cmbMaxWeight.setSelectedIndex(8);
        cmbMaxWeight.setToolTipText("Maximum size for words.");
        cmbMaxWeight.setEnabled(false);

        jLabel7.setText("Font");

        cmbFont.setModel(new javax.swing.DefaultComboBoxModel(PFont.list()));
        cmbFont.setToolTipText("Use this font. Note: Some fonts work better than others.");
        cmbFont.setEnabled(false);

        jLabel8.setText("Placer");

        cmbPlacer.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Center Clump", "Horizontal Band Anchored Left", "Horizontal Line", "Swirl", "Upper Left", "Wave" }));
        cmbPlacer.setToolTipText("How to place the words when drawing.");
        cmbPlacer.setEnabled(false);

        cbxIncludeNumbers.setText("Include Numbers");
        cbxIncludeNumbers.setToolTipText("Include numbers.");
        cbxIncludeNumbers.setEnabled(false);

        cbxUppercase.setText("Force Uppercase");
        cbxUppercase.setToolTipText("Force all words to uppercase.");
        cbxUppercase.setEnabled(false);

        jLabel9.setText("Stop Words - Space Delimited");

        jLabel12.setText("Wiggle");

        slideWiggle.setMajorTickSpacing(25);
        slideWiggle.setMinorTickSpacing(5);
        slideWiggle.setToolTipText("Wiggle causes the words to be rotated. More wiggle, more rotation.");
        slideWiggle.setValue(0);

        slideBackground.setMaximum(255);
        slideBackground.setToolTipText("Background color, black to white.");
        slideBackground.setValue(255);

        cmbColor.setModel(new javax.swing.DefaultComboBoxModel(colorScheme.keySet().toArray()));

        txtStopWords.setColumns(20);
        txtStopWords.setLineWrap(true);
        txtStopWords.setRows(5);
        txtStopWords.setToolTipText("A space-delimited list of words to exclude from the tag cloud.");
        txtStopWords.setWrapStyleWord(true);
        txtStopWords.setEnabled(false);
        jScrollPane1.setViewportView(txtStopWords);

        jLabel13.setText("Background");

        jLabel1.setText("Colors");

        org.jdesktop.layout.GroupLayout jPanel2Layout = new org.jdesktop.layout.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jPanel2Layout.createSequentialGroup()
                        .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                            .add(jLabel13)
                            .add(jLabel12)
                            .add(jLabel10)
                            .add(jLabel5)
                            .add(jLabel7)
                            .add(jLabel8)
                            .add(jLabel1))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                        .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(cmbColor, 0, 424, Short.MAX_VALUE)
                            .add(org.jdesktop.layout.GroupLayout.TRAILING, slideBackground, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 424, Short.MAX_VALUE)
                            .add(jPanel2Layout.createSequentialGroup()
                                .add(cmbX, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(jLabel11)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(cmbY, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                            .add(jPanel2Layout.createSequentialGroup()
                                .add(cmbMinWeight, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(jLabel6)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(cmbMaxWeight, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                            .add(jPanel2Layout.createSequentialGroup()
                                .add(cbxIncludeNumbers)
                                .add(18, 18, 18)
                                .add(cbxUppercase))
                            .add(slideWiggle, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 424, Short.MAX_VALUE)
                            .add(cmbPlacer, 0, 424, Short.MAX_VALUE)
                            .add(cmbFont, 0, 424, Short.MAX_VALUE)))
                    .add(jLabel9)
                    .add(jScrollPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 526, Short.MAX_VALUE)
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, btnTagCloud))
                .add(72, 72, 72))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel2Layout.createSequentialGroup()
                .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(cmbX, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jLabel11)
                    .add(cmbY, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jLabel10))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel5)
                    .add(cmbMinWeight, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jLabel6)
                    .add(cmbMaxWeight, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(cmbFont, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jLabel7))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(cmbPlacer, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jLabel8))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(cbxIncludeNumbers)
                    .add(cbxUppercase))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jLabel12)
                    .add(slideWiggle, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(slideBackground, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jLabel13))
                .add(17, 17, 17)
                .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel1)
                    .add(cmbColor, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jLabel9)
                .add(5, 5, 5)
                .add(jScrollPane1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(btnTagCloud)
                .addContainerGap())
        );

        jTabbedPane1.addTab("Tag Cloud", jPanel2);

        cbxUpdates.setText("Check for updates at startup");
        cbxUpdates.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbxUpdatesActionPerformed(evt);
            }
        });

        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder("Proxy"));

        cbxProxy.setText("Use network proxy");
        cbxProxy.setToolTipText("If selected, Tagerator will use a network proxy for http access.");
        cbxProxy.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbxProxyActionPerformed(evt);
            }
        });

        jLabel14.setText("Proxy host");

        txtProxyHost.setToolTipText("Proxy host.");

        jLabel15.setText("Proxy port");

        txtProxyPort.setToolTipText("Proxy port.");

        jLabel16.setText("Username");

        txtProxyUser.setToolTipText("Enter the username for your proxy, if required.");

        jLabel17.setText("Password");

        btnProxy.setText("Apply Proxy Settings");
        btnProxy.setToolTipText("Make the proxy settings active.");
        btnProxy.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnProxyActionPerformed(evt);
            }
        });

        txtProxyPass.setToolTipText("Enter the password for your proxy user, if required.");

        org.jdesktop.layout.GroupLayout jPanel4Layout = new org.jdesktop.layout.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel4Layout.createSequentialGroup()
                .add(jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(cbxProxy)
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel4Layout.createSequentialGroup()
                        .add(29, 29, 29)
                        .add(jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(jPanel4Layout.createSequentialGroup()
                                .add(jLabel14)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(txtProxyHost, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 440, Short.MAX_VALUE))
                            .add(jPanel4Layout.createSequentialGroup()
                                .add(jLabel15)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                                .add(txtProxyPort, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 81, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                            .add(jPanel4Layout.createSequentialGroup()
                                .add(jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                    .add(jLabel16)
                                    .add(jLabel17))
                                .add(18, 18, 18)
                                .add(jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                    .add(txtProxyPass, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 437, Short.MAX_VALUE)
                                    .add(txtProxyUser, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 437, Short.MAX_VALUE)))))
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel4Layout.createSequentialGroup()
                        .addContainerGap(372, Short.MAX_VALUE)
                        .add(btnProxy)))
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel4Layout.createSequentialGroup()
                .add(cbxProxy)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel14)
                    .add(txtProxyHost, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel15)
                    .add(txtProxyPort, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel16)
                    .add(txtProxyUser, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .add(jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel17)
                    .add(txtProxyPass, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(btnProxy)
                .add(7, 7, 7))
        );

        org.jdesktop.layout.GroupLayout jPanel3Layout = new org.jdesktop.layout.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel3Layout.createSequentialGroup()
                .add(jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(cbxUpdates)
                    .add(jPanel3Layout.createSequentialGroup()
                        .add(20, 20, 20)
                        .add(jPanel4, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .add(cbxUpdates)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(jPanel4, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(143, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Settings", jPanel3);

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(jTabbedPane1)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(jTabbedPane1)
                .addContainerGap())
        );

        jTabbedPane1.getAccessibleContext().setAccessibleName("Tag Cloud");

        pack();
    }// </editor-fold>//GEN-END:initComponents


    /**
     * Start the tag collection process.
     *
     * @param evt
     */
    private void btnStartActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnStartActionPerformed
	BlockerPanel blocker = new BlockerPanel(this, "Searching");
	setGlassPane(blocker);
	TagCollectorWorker worker = new TagCollectorWorker(this, blocker);
	worker.execute();
    }//GEN-LAST:event_btnStartActionPerformed

    
    /**
     * Start the tag could generation process.
     *
     * @param evt
     */
    private void btnTagCloudActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTagCloudActionPerformed
	CloudFrame cf = new CloudFrame();
	cf.setVisible(true);
	cf.startSketch();
    }//GEN-LAST:event_btnTagCloudActionPerformed

    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateActionPerformed

	try {
	    BrowserLauncher.openURL("http://jeremybrooks.net/tagerator/");
	} catch (IOException e) {
	    logger.error("Could not open web browser.", e);
	    JOptionPane.showMessageDialog(this, "Could not open the web browser.\n" +
		    "Error message was:\n" +
		    e.getMessage(),
		    "Error Opening Browser",
		    JOptionPane.ERROR_MESSAGE);

	}
    }//GEN-LAST:event_btnUpdateActionPerformed

    
    private void cbxProxyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbxProxyActionPerformed
	this.setProxyEnabledStates();
    }//GEN-LAST:event_cbxProxyActionPerformed


    private void btnProxyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnProxyActionPerformed
	if (this.cbxProxy.isSelected()) {
	    StringBuilder sb = new StringBuilder();
	    boolean ok = true;
	    // validate settings
	    String host = this.txtProxyHost.getText().trim();
	    if (host.isEmpty()) {
		sb.append("You must specify a host.\n");
		ok = false;
	    }

	    int port = 0;
	    try {
		port = Integer.parseInt(this.txtProxyPort.getText());
	    } catch (Exception e) {
		sb.append("The port must be a number.\n");
		ok = false;
	    }

	    String user = this.txtProxyUser.getText();
	    char[] pass = this.txtProxyPass.getPassword();

	    
	    if (ok) {
		// save properties
		Main.getPropertyStore().setProperty(TConstants.USE_PROXY, true);
		Main.getPropertyStore().setProperty(TConstants.PROXY_HOST, host);
		Main.getPropertyStore().setProperty(TConstants.PROXY_PASS, new String(pass));
		Main.getPropertyStore().setProperty(TConstants.PROXY_PORT, port);
		Main.getPropertyStore().setProperty(TConstants.PROXY_USER, user);

		// apply proxy
		NetUtil.enableProxy(host, port, user, pass);
	    } else {
		JOptionPane.showMessageDialog(this,
			"Please correct the following errors:\n" + sb.toString(),
			"Invalid entries", JOptionPane.ERROR_MESSAGE);
	    }

	} else {
	    Main.getPropertyStore().setProperty(TConstants.USE_PROXY, false);
	    Main.getPropertyStore().setProperty(TConstants.PROXY_HOST, "");
	    Main.getPropertyStore().setProperty(TConstants.PROXY_PASS, "");
	    Main.getPropertyStore().setProperty(TConstants.PROXY_PORT, "");
	    Main.getPropertyStore().setProperty(TConstants.PROXY_USER, "");

	    this.txtProxyHost.setText("");
	    this.txtProxyPass.setText("");
	    this.txtProxyPort.setText("");
	    this.txtProxyUser.setText("");

	    NetUtil.clearProxy();
	}
    }//GEN-LAST:event_btnProxyActionPerformed

    private void cbxUpdatesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbxUpdatesActionPerformed
	Main.getPropertyStore().setProperty(TConstants.CHECK_FOR_UPDATES, this.cbxUpdates.isSelected());
    }//GEN-LAST:event_cbxUpdatesActionPerformed

    private void btnShowTagsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnShowTagsActionPerformed
	new TagWindow().setVisible(true);
    }//GEN-LAST:event_btnShowTagsActionPerformed

    private void btnAuthorizeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAuthorizeActionPerformed
	doAuth();
    }//GEN-LAST:event_btnAuthorizeActionPerformed


    /**
     * Do Flickr authorization.
     *
     */
    public void doAuth() {
	if (!FlickrHelper.getInstance().authorize()) {
	    // Display the modal login dialog
	    (new LoginDialog(this, true)).setVisible(true);

	    if (FlickrHelper.getInstance().authorize()) {
		logger.info("Authentication OK");
		this.btnAuthorize.setVisible(false);
	    } else {
		this.btnAuthorize.setVisible(true);
	    }
	}
	
	this.setTitle("Tagerator :: " + FlickrHelper.getInstance().getUsername());
	
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAuthorize;
    private javax.swing.JButton btnProxy;
    private javax.swing.JButton btnShowTags;
    private javax.swing.JButton btnStart;
    private static javax.swing.JToggleButton btnTagCloud;
    private javax.swing.JButton btnUpdate;
    private javax.swing.JCheckBox cbxIncludeNumbers;
    private javax.swing.JCheckBox cbxProxy;
    private javax.swing.JCheckBox cbxUpdates;
    private javax.swing.JCheckBox cbxUppercase;
    private javax.swing.JComboBox cmbColor;
    private javax.swing.JComboBox cmbFont;
    private javax.swing.JComboBox cmbMaxWeight;
    private javax.swing.JComboBox cmbMinWeight;
    private javax.swing.JComboBox cmbPlacer;
    private javax.swing.JComboBox cmbX;
    private javax.swing.JComboBox cmbY;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTextArea jTextArea1;
    private static javax.swing.JLabel lblLastCount;
    private static javax.swing.JLabel lblTotal;
    private javax.swing.JSlider slideBackground;
    private javax.swing.JSlider slideWiggle;
    private javax.swing.JTextField txtProxyHost;
    private javax.swing.JPasswordField txtProxyPass;
    private javax.swing.JTextField txtProxyPort;
    private javax.swing.JTextField txtProxyUser;
    private javax.swing.JTextArea txtStopWords;
    // End of variables declaration//GEN-END:variables



    /**
     * Callback allowing the tag collection process to set the total number
     * of tags.
     *
     * This also enables the tag cloud button.
     * @param total
     */
    public static void setTotal(int total) {
	lblTotal.setText("Total Tags: " + total);
	String date = new Date().toString();
	lblLastCount.setText("Last Count: " + date);
	MainWindow.getMainWindow().enableTagCloud();

	Main.getPropertyStore().setProperty(TConstants.LAST_DATE, date);
	Main.getPropertyStore().setProperty(TConstants.TOTAL_TAGS, total);
    }


    /**
     * Get a reference to the main window.
     * @return
     */
    public static MainWindow getMainWindow() {
	return mainWindow;
    }

    public int getMinWeight() {
	return Integer.parseInt(this.cmbMinWeight.getSelectedItem().toString());
    }
    public int getMaxWeight() {
	return Integer.parseInt(this.cmbMaxWeight.getSelectedItem().toString());
    }
    public String getCloudFont() {
	return this.cmbFont.getSelectedItem().toString();
    }
    public int getPlacer() {
	return this.cmbPlacer.getSelectedIndex();
    }
    public boolean isIncludeNumbers() {
	return this.cbxIncludeNumbers.isSelected();
    }
    public String getStopWords() {
	return this.txtStopWords.getText();
    }
    public int getCanvasX() {
	return Integer.parseInt(this.cmbX.getSelectedItem().toString());
    }
    public int getCanvasY() {
	return Integer.parseInt(this.cmbY.getSelectedItem().toString());
    }

    public int getWiggle() {
	return this.slideWiggle.getValue();
    }
    public int getBackgroundSlider() {
	return this.slideBackground.getValue();
    }

    public void setUpdateAvailable(boolean available) {
	this.btnUpdate.setVisible(available);
    }
    public boolean isUppercase() {
	return this.cbxUppercase.isSelected();
    }
    public List<int[]> getSelectedColorArray() {
	String key = this.cmbColor.getSelectedItem().toString();
	return this.colorScheme.get(key);
    }

    /**
     * Enable/disable the tag cloud UI controls.
     */
    public void enableTagCloud() {
	boolean enable = Main.tagCloudFile.exists() && Main.tagCloudFile.length() > 0;

	this.cmbFont.setEnabled(enable);
	this.cmbMaxWeight.setEnabled(enable);
	this.cmbMinWeight.setEnabled(enable);
	this.cmbPlacer.setEnabled(enable);
	this.btnTagCloud.setEnabled(enable);
	this.cbxIncludeNumbers.setEnabled(enable);
	this.cbxUppercase.setEnabled(enable);
	this.txtStopWords.setEnabled(enable);
	this.cmbX.setEnabled(enable);
	this.cmbY.setEnabled(enable);
	this.slideWiggle.setEnabled(enable);
	this.slideBackground.setEnabled(enable);

	this.btnShowTags.setVisible(enable);
    }


    private void setProxyEnabledStates() {
	boolean enable = this.cbxProxy.isSelected();
	this.txtProxyHost.setEnabled(enable);
	this.txtProxyPass.setEnabled(enable);
	this.txtProxyPort.setEnabled(enable);
	this.txtProxyUser.setEnabled(enable);
    }


    /**
     * Read the colorscheme.txt file in the tagerator config directory,
     * adding color schemes as needed.
     *
     * The file format is:
     * # comments begin with a hash
     * Scheme Name=0,1,2; 3,4,5
     *
     * There can be multiple numbers defining each color.
     */
    private void initColorScheme() {
	BufferedReader in = null;
	String line = null;
	List<Integer> intList = new ArrayList<Integer>();

	this.colorScheme = new HashMap<String, List<int[]>>();

	// add random, this will be used if there are no user choices defined
	colorScheme.put("Random", null);

	// parse the config file
	try {
	    in = new BufferedReader(new FileReader(new File(Main.configDir, TConstants.COLOR_SCHEME_FILENAME)));
	    while ((line = in.readLine()) != null) {
		if (!line.startsWith("#") && !line.trim().isEmpty()) {

		    List<int[]> intArrayList = new ArrayList<int[]>();

		    line = line.trim();
		    int pos = line.indexOf("=");
		    String name = line.substring(0, pos);
		    String colors = line.substring(pos + 1);

		    // now figure out the colors
		    StringTokenizer tok = new StringTokenizer(colors, ";");
		    while (tok.hasMoreTokens()) {
			intList.clear();
			String nums = tok.nextToken();
			StringTokenizer tok2 = new StringTokenizer(nums, ",");
			while (tok2.hasMoreTokens()) {
			    intList.add(Integer.decode(tok2.nextToken().trim()));
			}
			// add to the list
			int[] ints = new int[intList.size()];
			int i = 0;
			for (Integer x : intList) {
			    ints[i] = x;
			    i++;
			}
			intArrayList.add(ints);
		    }

		    colorScheme.put(name, intArrayList);
		}
	    }
	} catch (Exception e) {
	    logger.warn("Could not read colorscheme.txt", e);
	} finally {
	    IOUtil.close(in);
	}
    }
}
